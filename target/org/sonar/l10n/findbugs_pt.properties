rule.findbugs.IMSE_DONT_CATCH_IMSE.name=Bad practice - Dubious catching of IllegalMonitorStateException
rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED.name=Performance - Primitive value is boxed and then immediately unboxed
rule.findbugs.IJU_SETUP_NO_SUPER.name=Correctness - TestCase defines setUp that doesn't call super.setUp()
rule.findbugs.TQ_ALWAYS_VALUE_USED_WHERE_NEVER_REQUIRED.name=Correctness - Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required
rule.findbugs.TLW_TWO_LOCK_WAIT.name=Multithreaded correctness - Wait with two locks held
rule.findbugs.RV_01_TO_INT.name=Correctness - Random value from 0 to 1 is coerced to the integer 0
rule.findbugs.NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE.name=Dodgy - Parameter must be nonnull but is marked as nullable
rule.findbugs.RV_ABSOLUTE_VALUE_OF_RANDOM_INT.name=Correctness - Bad attempt to compute absolute value of signed 32-bit random integer
rule.findbugs.EC_INCOMPATIBLE_ARRAY_COMPARE.name=Correctness - equals(...) used to compare incompatible arrays
rule.findbugs.UL_UNRELEASED_LOCK_EXCEPTION_PATH.name=Multithreaded correctness - Method does not release lock on all exception paths
rule.findbugs.SE_NONSTATIC_SERIALVERSIONID.name=Bad practice - serialVersionUID isn't static
rule.findbugs.UCF_USELESS_CONTROL_FLOW.name=Dodgy - Useless control flow
rule.findbugs.BC_IMPOSSIBLE_CAST.name=Correctness - Impossible cast
rule.findbugs.XSS_REQUEST_PARAMETER_TO_SEND_ERROR.name=Security - Servlet reflected cross site scripting vulnerability
rule.findbugs.DM_NEW_FOR_GETCLASS.name=Performance - Method allocates an object, only to get the class object
rule.findbugs.OBL_UNSATISFIED_OBLIGATION.name=Experimental - Method may fail to clean up stream or resource
rule.findbugs.UW_UNCOND_WAIT.name=Multithreaded correctness - Unconditional wait
rule.findbugs.DLS_DEAD_LOCAL_STORE_OF_NULL.name=Dodgy - Dead store of null to local variable
rule.findbugs.NM_CLASS_NAMING_CONVENTION.name=Class names should start with an upper case letter
rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN.name=Correctness - Suspicious reference comparison of Boolean values
rule.findbugs.MWN_MISMATCHED_NOTIFY.name=Multithreaded correctness - Mismatched notify()
rule.findbugs.NM_VERY_CONFUSING.name=Correctness - Very confusing method names
rule.findbugs.FI_NULLIFY_SUPER.name=Bad practice - Finalizer nullifies superclass finalizer
rule.findbugs.MTIA_SUSPECT_STRUTS_INSTANCE_FIELD.name=Dodgy - Class extends Struts Action class and uses instance variables
rule.findbugs.DM_STRING_CTOR.name=Performance - Method invokes inefficient new String(String) constructor
rule.findbugs.STCAL_INVOKE_ON_STATIC_DATE_FORMAT_INSTANCE.name=Multithreaded correctness - Call to static DateFormat
rule.findbugs.NP_NULL_PARAM_DEREF_NONVIRTUAL.name=Correctness - Non-virtual method call passes null for nonnull parameter
rule.findbugs.FI_EMPTY.name=Bad practice - Empty finalizer should be deleted
rule.findbugs.CD_CIRCULAR_DEPENDENCY.name=Experimental - Test for circular dependencies among classes
rule.findbugs.EC_UNRELATED_TYPES.name=Correctness - Call to equals() comparing different types
rule.findbugs.EI_EXPOSE_STATIC_REP2.name=Malicious code vulnerability - May expose internal static state by storing a mutable object into a static field
rule.findbugs.DMI_INVOKING_TOSTRING_ON_ANONYMOUS_ARRAY.name=Correctness - Invocation of toString on an anonymous array
rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_ANON.name=Performance - Could be refactored into a named static inner class
rule.findbugs.STI_INTERRUPTED_ON_UNKNOWNTHREAD.name=Correctness - Static Thread.interrupted() method invoked on thread instance
rule.findbugs.CN_IDIOM_NO_SUPER_CALL.name=Bad practice - clone method does not call super.clone()
rule.findbugs.VA_FORMAT_STRING_BAD_ARGUMENT.name=Correctness - Format string placeholder incompatible with passed argument
rule.findbugs.EQ_DOESNT_OVERRIDE_EQUALS.name=Dodgy - Class doesn't override equals in superclass
rule.findbugs.BC_IMPOSSIBLE_DOWNCAST_OF_TOARRAY.name=Correctness - Impossible downcast of toArray() result
rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR_FOR_EXTERNALIZATION.name=Bad practice - Class is Externalizable but doesn't define a void constructor
rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_ALWAYS_SINK.name=Correctness - Value required to have type qualifier, but marked as unknown
rule.findbugs.SIC_INNER_SHOULD_BE_STATIC_NEEDS_THIS.name=Performance - Could be refactored into a static inner class
rule.findbugs.EQ_CHECK_FOR_OPERAND_NOT_COMPATIBLE_WITH_THIS.name=Bad practice - Equals checks for noncompatible operand
rule.findbugs.RV_RETURN_VALUE_OF_PUTIFABSENT_IGNORED.name=Correctness - Return value of putIfAbsent ignored, value passed to putIfAbsent reused
rule.findbugs.STCAL_INVOKE_ON_STATIC_CALENDAR_INSTANCE.name=Multithreaded correctness - Call to static Calendar
rule.findbugs.MS_CANNOT_BE_FINAL.name=Malicious code vulnerability - Field isn't final and can't be protected from malicious code
rule.findbugs.IS_INCONSISTENT_SYNC.name=Multithreaded correctness - Inconsistent synchronization
rule.findbugs.SE_NO_SERIALVERSIONID.name=Bad practice - Class is Serializable, but doesn't define serialVersionUID
rule.findbugs.EI_EXPOSE_REP2.name=Malicious code vulnerability - May expose internal representation by incorporating reference to mutable object
rule.findbugs.NM_METHOD_CONSTRUCTOR_CONFUSION.name=Correctness - Apparent method/constructor confusion
rule.findbugs.ICAST_INTEGER_MULTIPLY_CAST_TO_LONG.name=Dodgy - Result of integer multiplication cast to long
rule.findbugs.QF_QUESTIONABLE_FOR_LOOP.name=Dodgy - Complicated, subtle or wrong increment in for-loop
rule.findbugs.DLS_DEAD_STORE_OF_CLASS_LITERAL.name=Correctness - Dead store of class literal
rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_MEMBER_IDENTIFIER.name=Bad practice - Use of identifier that is a keyword in later versions of Java
rule.findbugs.BC_VACUOUS_INSTANCEOF.name=Dodgy - instanceof will always return true
rule.findbugs.INT_VACUOUS_BIT_OPERATION.name=Dodgy - Vacuous bit mask operation on integer value
rule.findbugs.NP_NULL_INSTANCEOF.name=Correctness - A known null value is checked to see if it is an instance of a type
rule.findbugs.SIC_THREADLOCAL_DEADLY_EMBRACE.name=Correctness - Deadly embrace of non-static inner class and thread local
rule.findbugs.EQ_UNUSUAL.name=Dodgy - Unusual equals method
rule.findbugs.IJU_NO_TESTS.name=Correctness - TestCase has no tests
rule.findbugs.EQ_OVERRIDING_EQUALS_NOT_SYMMETRIC.name=Correctness - equals method overrides equals in superclass and may not be symmetric
rule.findbugs.XFB_XML_FACTORY_BYPASS.name=Dodgy - Method directly allocates a specific implementation of xml interfaces
rule.findbugs.SWL_SLEEP_WITH_LOCK_HELD.name=Multithreaded correctness - Method calls Thread.sleep() with a lock held
rule.findbugs.CN_IDIOM.name=Bad practice - Class implements Cloneable but does not define or use clone method
rule.findbugs.WA_AWAIT_NOT_IN_LOOP.name=Multithreaded correctness - Condition.await() not in loop
rule.findbugs.DM_FP_NUMBER_CTOR.name=Performance - Method invokes inefficient floating-point Number constructor; use static valueOf instead
rule.findbugs.SF_SWITCH_NO_DEFAULT.name=Switch statement found where default case is missing
rule.findbugs.NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE.name=Dodgy - Possible null pointer dereference due to return value of called method
rule.findbugs.NP_CLONE_COULD_RETURN_NULL.name=Bad practice - Clone method may return null
rule.findbugs.MS_OOI_PKGPROTECT.name=Malicious code vulnerability - Field should be moved out of an interface and made package protected
rule.findbugs.DM_BOXED_PRIMITIVE_TOSTRING.name=Performance - Method allocates a boxed primitive just to call toString
rule.findbugs.EQ_ABSTRACT_SELF.name=Bad practice - Abstract class defines covariant equals() method
rule.findbugs.DM_STRING_TOSTRING.name=Performance - Method invokes toString() method on a String
rule.findbugs.SE_METHOD_MUST_BE_PRIVATE.name=Correctness - Method must be private in order for serialization to work
rule.findbugs.DL_SYNCHRONIZATION_ON_BOOLEAN.name=Multithreaded correctness - Synchronization on Boolean could lead to deadlock
rule.findbugs.UWF_UNWRITTEN_FIELD.name=Correctness - Unwritten field
rule.findbugs.IS2_INCONSISTENT_SYNC.name=Multithreaded correctness - Inconsistent synchronization
rule.findbugs.IM_AVERAGE_COMPUTATION_COULD_OVERFLOW.name=Dodgy - Computation of average could overflow
rule.findbugs.BIT_SIGNED_CHECK_HIGH_BIT.name=Correctness - Check for sign of bitwise operation
rule.findbugs.FL_MATH_USING_FLOAT_PRECISION.name=Correctness - Method performs math using floating point precision
rule.findbugs.WS_WRITEOBJECT_SYNC.name=Multithreaded correctness - Class's writeObject() method is synchronized but nothing else is
rule.findbugs.RV_RETURN_VALUE_IGNORED.name=Correctness - Method ignores return value
rule.findbugs.SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE.name=Security - Nonconstant string passed to execute method on an SQL statement
rule.findbugs.JCIP_FIELD_ISNT_FINAL_IN_IMMUTABLE_CLASS.name=Bad practice - Fields of immutable classes should be final
rule.findbugs.AM_CREATES_EMPTY_ZIP_FILE_ENTRY.name=Bad practice - Creates an empty zip file entry
rule.findbugs.DM_NEXTINT_VIA_NEXTDOUBLE.name=Performance - Use the nextInt method of Random rather than nextDouble to generate a random integer
rule.findbugs.UI_INHERITANCE_UNSAFE_GETRESOURCE.name=Bad practice - Usage of GetResource may be unsafe if class is extended
rule.findbugs.SIO_SUPERFLUOUS_INSTANCEOF.name=Correctness - Unnecessary type check done using instanceof operator
rule.findbugs.EQ_OTHER_NO_OBJECT.name=Correctness - equals() method defined that doesn't override equals(Object)
rule.findbugs.USM_USELESS_ABSTRACT_METHOD.name=Experimental - Abstract Method is already defined in implemented interface
rule.findbugs.MTIA_SUSPECT_SERVLET_INSTANCE_FIELD.name=Dodgy - Class extends Servlet class and uses instance variables
rule.findbugs.DM_USELESS_THREAD.name=Multithreaded correctness - A thread was created using the default empty run method
rule.findbugs.ML_SYNC_ON_UPDATED_FIELD.name=Multithreaded correctness - Method synchronizes on an updated field
rule.findbugs.CO_SELF_NO_OBJECT.name=Bad practice - Covariant compareTo() method defined
rule.findbugs.BC_UNCONFIRMED_CAST.name=Dodgy - Unchecked/unconfirmed cast
rule.findbugs.FI_FINALIZER_NULLS_FIELDS.name=Bad practice - Finalizer nulls fields
rule.findbugs.BIT_AND.name=Correctness - Incompatible bit masks (BIT_AND)
rule.findbugs.FE_FLOATING_POINT_EQUALITY.name=Dodgy - Test for floating point equality
rule.findbugs.TQ_EXPLICIT_UNKNOWN_SOURCE_VALUE_REACHES_NEVER_SINK.name=Correctness - Value required to not have type qualifier, but marked as unknown
rule.findbugs.NP_NULL_PARAM_DEREF.name=Correctness - Method call passes null for nonnull parameter
rule.findbugs.FB_MISSING_EXPECTED_WARNING.name=Experimental - Missing expected or desired warning from FindBugs
rule.findbugs.DMI_INVOKING_HASHCODE_ON_ARRAY.name=Correctness - Invocation of hashCode on an array
rule.findbugs.QBA_QUESTIONABLE_BOOLEAN_ASSIGNMENT.name=Correctness - Method assigns boolean literal in boolean expression
rule.findbugs.SA_FIELD_SELF_COMPARISON.name=Correctness - Self comparison of field with itself
rule.findbugs.UR_UNINIT_READ_CALLED_FROM_SUPER_CONSTRUCTOR.name=Correctness - Uninitialized read of field method called from constructor of superclass
rule.findbugs.ES_COMPARING_PARAMETER_STRING_WITH_EQ.name=Bad practice - Comparison of String parameter using == or !=
rule.findbugs.INT_BAD_COMPARISON_WITH_NONNEGATIVE_VALUE.name=Correctness - Bad comparison of nonnegative value with negative constant
rule.findbugs.INT_BAD_COMPARISON_WITH_SIGNED_BYTE.name=Correctness - Bad comparison of signed byte
rule.findbugs.IO_APPENDING_TO_OBJECT_OUTPUT_STREAM.name=Correctness - Doomed attempt to append to an object output stream
rule.findbugs.FI_MISSING_SUPER_CALL.name=Bad practice - Finalizer does not call superclass finalizer
rule.findbugs.VA_FORMAT_STRING_EXTRA_ARGUMENTS_PASSED.name=Correctness - More arguments are passed that are actually used in the format string
rule.findbugs.HE_EQUALS_USE_HASHCODE.name=Bad practice - Class defines equals() and uses Object.hashCode()
rule.findbugs.IJU_BAD_SUITE_METHOD.name=Correctness - TestCase declares a bad suite method
rule.findbugs.DMI_CONSTANT_DB_PASSWORD.name=Security - Hardcoded constant database password
rule.findbugs.REC_CATCH_EXCEPTION.name=Dodgy - Exception is caught when Exception is not thrown
rule.findbugs.PS_PUBLIC_SEMAPHORES.name=Dodgy - Class exposes synchronization and semaphores in its public interface
rule.findbugs.EC_UNRELATED_INTERFACES.name=Correctness - Call to equals() comparing different interface types
rule.findbugs.UCF_USELESS_CONTROL_FLOW_NEXT_LINE.name=Correctness - Useless control flow to next line
rule.findbugs.LG_LOST_LOGGER_DUE_TO_WEAK_REFERENCE.name=Experimental - Potential lost logger changes due to weak reference in OpenJDK
rule.findbugs.NP_UNWRITTEN_FIELD.name=Correctness - Read of unwritten field
rule.findbugs.DMI_UNSUPPORTED_METHOD.name=Dodgy - Call to unsupported method
rule.findbugs.RCN_REDUNDANT_COMPARISON_OF_NULL_AND_NONNULL_VALUE.name=Dodgy - Redundant comparison of non-null value to null
rule.findbugs.EC_BAD_ARRAY_COMPARE.name=Correctness - Invocation of equals() on an array, which is equivalent to ==
rule.findbugs.EI_EXPOSE_REP.name=Malicious code vulnerability - May expose internal representation by returning reference to mutable object
rule.findbugs.NP_DEREFERENCE_OF_READLINE_VALUE.name=Dodgy - Dereference of the result of readLine() without nullcheck
rule.findbugs.UPM_UNCALLED_PRIVATE_METHOD.name=Performance - Private method is never called
rule.findbugs.NP_NULL_ON_SOME_PATH.name=Correctness - Possible null pointer dereference
rule.findbugs.NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT.name=Bad practice - equals() method does not check for null argument
rule.findbugs.EC_NULL_ARG.name=Correctness - Call to equals() with null argument
rule.findbugs.SE_BAD_FIELD_STORE.name=Bad practice - Non-serializable value stored into instance field of a serializable class
rule.findbugs.VO_VOLATILE_REFERENCE_TO_ARRAY.name=Multithreaded correctness - A volatile reference to an array doesn't treat the array elements as volatile
rule.findbugs.NP_SYNC_AND_NULL_CHECK_FIELD.name=Multithreaded correctness - Synchronize and null check on the same field.
rule.findbugs.DM_EXIT.name=Bad practice - Method invokes System.exit(...)
rule.findbugs.RC_REF_COMPARISON.name=Bad practice - Suspicious reference comparison
rule.findbugs.SE_NO_SUITABLE_CONSTRUCTOR.name=Bad practice - Class is Serializable but its superclass doesn't define a void constructor
rule.findbugs.DC_DOUBLECHECK.name=Multithreaded correctness - Possible double check of field
rule.findbugs.DMI_LONG_BITS_TO_DOUBLE_INVOKED_ON_INT.name=Correctness - Double.longBitsToDouble invoked on an int
rule.findbugs.RpC_REPEATED_CONDITIONAL_TEST.name=Correctness - Repeated conditional tests
rule.findbugs.WMI_WRONG_MAP_ITERATOR.name=Performance - Inefficient use of keySet iterator instead of entrySet iterator
rule.findbugs.DLS_DEAD_LOCAL_STORE.name=Dodgy - Dead store to local variable
rule.findbugs.INT_BAD_REM_BY_1.name=Correctness - Integer remainder modulo 1
rule.findbugs.RV_RETURN_VALUE_IGNORED_BAD_PRACTICE.name=Bad practice - Method ignores exceptional return value
rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT.name=Dodgy - Self assignment of local variable
rule.findbugs.MS_SHOULD_BE_FINAL.name=Malicious code vulnerability - Field isn't final but should be
rule.findbugs.SIC_INNER_SHOULD_BE_STATIC.name=Performance - Should be a static inner class
rule.findbugs.NP_GUARANTEED_DEREF.name=Correctness - Null value is guaranteed to be dereferenced
rule.findbugs.SE_READ_RESOLVE_MUST_RETURN_OBJECT.name=Bad practice - The readResolve method must be declared with a return type of Object.
rule.findbugs.NP_LOAD_OF_KNOWN_NULL_VALUE.name=Dodgy - Load of known null value
rule.findbugs.BX_BOXING_IMMEDIATELY_UNBOXED_TO_PERFORM_COERCION.name=Performance - Primitive value is boxed then unboxed to perform primitive coercion
rule.findbugs.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE.name=Bad practice - Class defines clone() but doesn't implement Cloneable
rule.findbugs.CO_ABSTRACT_SELF.name=Bad practice - Abstract class defines covariant compareTo() method
rule.findbugs.BAC_BAD_APPLET_CONSTRUCTOR.name=Experimental - Bad Applet Constructor relies on uninitialized AppletStub
rule.findbugs.EQ_GETCLASS_AND_CLASS_CONSTANT.name=Bad practice - equals method fails for subtypes
rule.findbugs.DB_DUPLICATE_SWITCH_CLAUSES.name=Dodgy - Method uses the same code for two switch clauses
rule.findbugs.DB_DUPLICATE_BRANCHES.name=Dodgy - Method uses the same code for two branches
rule.findbugs.UOE_USE_OBJECT_EQUALS.name=Experimental - Calls to equals on a final class that doesn't override Object's equals method
rule.findbugs.FI_USELESS.name=Bad practice - Finalizer does nothing but call superclass finalizer
rule.findbugs.NP_ALWAYS_NULL.name=Correctness - Null pointer dereference
rule.findbugs.DMI_VACUOUS_SELF_COLLECTION_CALL.name=Correctness - Vacuous call to collections
rule.findbugs.DLS_DEAD_LOCAL_STORE_IN_RETURN.name=Correctness - Useless assignment in return statement
rule.findbugs.IJU_ASSERT_METHOD_INVOKED_FROM_RUN_METHOD.name=Correctness - JUnit assertion in run method will not be noticed by JUnit
rule.findbugs.DMI_EMPTY_DB_PASSWORD.name=Security - Empty database password
rule.findbugs.DM_BOOLEAN_CTOR.name=Performance - Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead
rule.findbugs.BC_IMPOSSIBLE_DOWNCAST.name=Correctness - Impossible downcast
rule.findbugs.BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS.name=Bad practice - Equals method should not assume anything about the type of its argument
rule.findbugs.RV_EXCEPTION_NOT_THROWN.name=Correctness - Exception created and dropped rather than thrown
rule.findbugs.VA_PRIMITIVE_ARRAY_PASSED_TO_OBJECT_VARARG.name=Correctness - Primitive array passed to function expecting a variable number of object arguments
rule.findbugs.LI_LAZY_INIT_UPDATE_STATIC.name=Multithreaded correctness - Incorrect lazy initialization and update of static field
rule.findbugs.SA_FIELD_SELF_ASSIGNMENT.name=Correctness - Self assignment of field
rule.findbugs.EQ_ALWAYS_FALSE.name=Correctness - equals method always returns false
rule.findbugs.DMI_RANDOM_USED_ONLY_ONCE.name=Bad practice - Random object created and used only once
rule.findbugs.NM_CLASS_NOT_EXCEPTION.name=Bad practice - Class is not derived from an Exception, even though it is named as such
rule.findbugs.SA_LOCAL_DOUBLE_ASSIGNMENT.name=Dodgy - Double assignment of local variable
rule.findbugs.NP_NULL_PARAM_DEREF_ALL_TARGETS_DANGEROUS.name=Correctness - Method call passes null for nonnull parameter (ALL_TARGETS_DANGEROUS)
rule.findbugs.NP_TOSTRING_COULD_RETURN_NULL.name=Bad practice - toString method may return null
rule.findbugs.BC_BAD_CAST_TO_ABSTRACT_COLLECTION.name=Dodgy - Questionable cast to abstract collection
rule.findbugs.NM_LCASE_HASHCODE.name=Class defines hashcode(); should it be hashCode()?
rule.findbugs.RU_INVOKE_RUN.name=Multithreaded correctness - Invokes run on a thread (did you mean to start it instead?)
rule.findbugs.DMI_INVOKING_TOSTRING_ON_ARRAY.name=Correctness - Invocation of toString on an array
rule.findbugs.NM_METHOD_NAMING_CONVENTION.name=Method names should start with a lower case letter
rule.findbugs.RCN_REDUNDANT_COMPARISON_TWO_NULL_VALUES.name=Dodgy - Redundant comparison of two null values
rule.findbugs.SA_LOCAL_SELF_COMPUTATION.name=Correctness - Nonsensical self computation involving a variable (e.g., x & x)
rule.findbugs.MS_MUTABLE_HASHTABLE.name=Malicious code vulnerability - Field is a mutable Hashtable
rule.findbugs.RV_DONT_JUST_NULL_CHECK_READLINE.name=Dodgy - Method discards result of readLine after checking if it is nonnull
rule.findbugs.ES_COMPARING_STRINGS_WITH_EQ.name=Bad practice - Comparison of String objects using == or !=
rule.findbugs.DL_SYNCHRONIZATION_ON_SHARED_CONSTANT.name=Multithreaded correctness - Synchronization on interned String could lead to deadlock
rule.findbugs.MF_METHOD_MASKS_FIELD.name=Correctness - Method defines a variable that obscures a field
rule.findbugs.EQ_SELF_USE_OBJECT.name=Correctness - Covariant equals() method defined, Object.equals(Object) inherited
rule.findbugs.ICAST_INT_CAST_TO_FLOAT_PASSED_TO_ROUND.name=Correctness - int value cast to float and then passed to Math.round
rule.findbugs.GC_UNRELATED_TYPES.name=Correctness - No relationship between generic parameter and method argument
rule.findbugs.BC_IMPOSSIBLE_INSTANCEOF.name=Correctness - instanceof will always return false
rule.findbugs.SBSC_USE_STRINGBUFFER_CONCATENATION.name=Performance - Method concatenates strings using + in a loop
rule.findbugs.ICAST_INT_CAST_TO_DOUBLE_PASSED_TO_CEIL.name=Correctness - int value cast to double and then passed to Math.ceil
rule.findbugs.UG_SYNC_SET_UNSYNC_GET.name=Multithreaded correctness - Unsynchronized get method, synchronized set method
rule.findbugs.RE_BAD_SYNTAX_FOR_REGULAR_EXPRESSION.name=Correctness - Invalid syntax for regular expression
rule.findbugs.SA_FIELD_SELF_COMPUTATION.name=Correctness - Nonsensical self computation involving a field (e.g., x & x)
rule.findbugs.DMI_SCHEDULED_THREAD_POOL_EXECUTOR_WITH_ZERO_CORE_THREADS.name=Correctness - Creation of ScheduledThreadPoolExecutor with zero core threads
rule.findbugs.DMI_USELESS_SUBSTRING.name=Dodgy - Invocation of substring(0), which returns the original value
rule.findbugs.IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD.name=Dodgy - Ambiguous invocation of either an inherited or outer method
rule.findbugs.OS_OPEN_STREAM.name=Bad practice - Method may fail to close stream
rule.findbugs.HE_INHERITS_EQUALS_USE_HASHCODE.name=Bad practice - Class inherits equals() and uses Object.hashCode()
rule.findbugs.SE_NONFINAL_SERIALVERSIONID.name=Bad practice - serialVersionUID isn't final
rule.findbugs.EQ_SELF_NO_OBJECT.name=Bad practice - Covariant equals() method defined
rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH.name=Dead store due to switch statement fall through
rule.findbugs.SW_SWING_METHODS_INVOKED_IN_SWING_THREAD.name=Bad practice - Certain swing methods needs to be invoked in Swing thread
rule.findbugs.VA_FORMAT_STRING_ILLEGAL.name=Correctness - Illegal format string
rule.findbugs.DM_NUMBER_CTOR.name=Performance - Method invokes inefficient Number constructor; use static valueOf instead
rule.findbugs.RV_REM_OF_RANDOM_INT.name=Dodgy - Remainder of 32-bit signed random integer
rule.findbugs.EQ_COMPARING_CLASS_NAMES.name=Correctness - equals method compares class names rather than class objects
rule.findbugs.ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD.name=Dodgy - Write to static field from instance method
rule.findbugs.TQ_NEVER_VALUE_USED_WHERE_ALWAYS_REQUIRED.name=Correctness - Value annotated as never carrying a type qualifier used where value carrying that qualifier is required
rule.findbugs.NS_NON_SHORT_CIRCUIT.name=Dodgy - Questionable use of non-short-circuit logic
rule.findbugs.VA_FORMAT_STRING_NO_PREVIOUS_ARGUMENT.name=Correctness - No previous argument for format string
rule.findbugs.SE_PRIVATE_READ_RESOLVE_NOT_INHERITED.name=Dodgy - private readResolve method not inherited by subclasses
rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE.name=Dodgy - Redundant nullcheck of value known to be non-null
rule.findbugs.NM_LCASE_TOSTRING.name=Class defines tostring(); should it be toString()?
rule.findbugs.HSC_HUGE_SHARED_STRING_CONSTANT.name=Performance - Huge string constants is duplicated across multiple class files
rule.findbugs.SE_TRANSIENT_FIELD_NOT_RESTORED.name=Bad practice - Transient field that isn't set by deserialization.
rule.findbugs.JLM_JSR166_LOCK_MONITORENTER.name=Multithreaded correctness - Synchronization performed on java.util.concurrent Lock
rule.findbugs.EQ_ALWAYS_TRUE.name=Correctness - equals method always returns true
rule.findbugs.ISC_INSTANTIATE_STATIC_CLASS.name=Bad practice - Needless instantiation of class that only supplies static methods
rule.findbugs.ICAST_IDIV_CAST_TO_DOUBLE.name=Dodgy - int division result cast to double or float
rule.findbugs.RC_REF_COMPARISON_BAD_PRACTICE.name=Correctness - Suspicious reference comparison to constant
rule.findbugs.FI_EXPLICIT_INVOCATION.name=Bad practice - Explicit invocation of finalizer
rule.findbugs.ESync_EMPTY_SYNC.name=Multithreaded correctness - Empty synchronized block
rule.findbugs.DMI_USING_REMOVEALL_TO_CLEAR_COLLECTION.name=Correctness - Don't use removeAll to clear a collection
rule.findbugs.SE_BAD_FIELD.name=Non-transient non-serializable instance field in serializable class
rule.findbugs.NP_STORE_INTO_NONNULL_FIELD.name=Correctness - Store of null value into field annotated NonNull
rule.findbugs.IT_NO_SUCH_ELEMENT.name=Bad practice - Iterator next() method can't throw NoSuchElementException
rule.findbugs.HRS_REQUEST_PARAMETER_TO_HTTP_HEADER.name=Security - HTTP Response splitting vulnerability
rule.findbugs.DMI_THREAD_PASSED_WHERE_RUNNABLE_EXPECTED.name=Dodgy - Thread passed where Runnable expected
rule.findbugs.NP_GUARANTEED_DEREF_ON_EXCEPTION_PATH.name=Correctness - Value is null and guaranteed to be dereferenced on exception path
rule.findbugs.RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE.name=Dodgy - Redundant nullcheck of value known to be null
rule.findbugs.DMI_CALLING_NEXT_FROM_HASNEXT.name=Correctness - hasNext method invokes next
rule.findbugs.HE_HASHCODE_USE_OBJECT_EQUALS.name=Bad practice - Class defines hashCode() and uses Object.equals()
rule.findbugs.VA_FORMAT_STRING_EXPECTED_MESSAGE_FORMAT_SUPPLIED.name=Correctness - MessageFormat supplied where printf style format expected
rule.findbugs.NP_BOOLEAN_RETURN_NULL.name=Bad practice - Method with Boolean return type returns explicit null
rule.findbugs.RI_REDUNDANT_INTERFACES.name=Dodgy - Class implements same interface as superclass
rule.findbugs.DL_SYNCHRONIZATION_ON_UNSHARED_BOXED_PRIMITIVE.name=Multithreaded correctness - Synchronization on boxed primitive values
rule.findbugs.STCAL_STATIC_CALENDAR_INSTANCE.name=Multithreaded correctness - Static Calendar
rule.findbugs.RR_NOT_CHECKED.name=Bad practice - Method ignores results of InputStream.read()
rule.findbugs.IL_INFINITE_RECURSIVE_LOOP.name=Correctness - An apparent infinite recursive loop
rule.findbugs.DMI_NONSERIALIZABLE_OBJECT_WRITTEN.name=Dodgy - Non serializable object written to ObjectOutput
rule.findbugs.GC_UNCHECKED_TYPE_IN_GENERIC_CALL.name=Bad practice - Unchecked type in generic call
rule.findbugs.IMA_INEFFICIENT_MEMBER_ACCESS.name=Experimental - Method accesses a private member variable of owning class
rule.findbugs.FI_PUBLIC_SHOULD_BE_PROTECTED.name=Malicious code vulnerability - Finalizer should be protected, not public
rule.findbugs.RV_CHECK_FOR_POSITIVE_INDEXOF.name=Dodgy - Method checks to see if result of String.indexOf is positive
rule.findbugs.ICAST_QUESTIONABLE_UNSIGNED_RIGHT_SHIFT.name=Dodgy - Unsigned right shift cast to short/byte
rule.findbugs.DM_STRING_VOID_CTOR.name=Performance - Method invokes inefficient new String() constructor
rule.findbugs.RE_POSSIBLE_UNINTENDED_PATTERN.name=Correctness - "." used for regular expression
rule.findbugs.WL_USING_GETCLASS_RATHER_THAN_CLASS_LITERAL.name=Multithreaded correctness - Sychronization on getClass rather than class literal
rule.findbugs.ICAST_BAD_SHIFT_AMOUNT.name=Correctness - Integer shift by an amount not in the range 0..31
rule.findbugs.SF_SWITCH_FALLTHROUGH.name=Switch statement found where one case falls through to the next case
rule.findbugs.DP_DO_INSIDE_DO_PRIVILEGED.name=Bad practice - Method invoked that should be only be invoked inside a doPrivileged block
rule.findbugs.NO_NOTIFY_NOT_NOTIFYALL.name=Multithreaded correctness - Using notify() rather than notifyAll()
rule.findbugs.SS_SHOULD_BE_STATIC.name=Performance - Unread field: should this field be static?
rule.findbugs.DM_RUN_FINALIZERS_ON_EXIT.name=Bad practice - Method invokes dangerous method runFinalizersOnExit
rule.findbugs.MS_FINAL_PKGPROTECT.name=Malicious code vulnerability - Field should be both final and package protected
rule.findbugs.BC_BAD_CAST_TO_CONCRETE_COLLECTION.name=Dodgy - Questionable cast to concrete collection
rule.findbugs.BIT_IOR_OF_SIGNED_BYTE.name=Correctness - Bitwise OR of signed byte value
rule.findbugs.MSF_MUTABLE_SERVLET_FIELD.name=Multithreaded correctness - Mutable servlet field
rule.findbugs.SE_BAD_FIELD_INNER_CLASS.name=Bad practice - Non-serializable class has a serializable inner class
rule.findbugs.BIT_ADD_OF_SIGNED_BYTE.name=Correctness - Bitwise add of signed byte value
rule.findbugs.FI_FINALIZER_ONLY_NULLS_FIELDS.name=Bad practice - Finalizer only nulls fields
rule.findbugs.DE_MIGHT_IGNORE.name=Bad practice - Method might ignore exception
rule.findbugs.XSS_REQUEST_PARAMETER_TO_SERVLET_WRITER.name=Security - Servlet reflected cross site scripting vulnerability
rule.findbugs.ML_SYNC_ON_FIELD_TO_GUARD_CHANGING_THAT_FIELD.name=Multithreaded correctness - Synchronization on field in futile attempt to guard that field
rule.findbugs.SQL_BAD_PREPARED_STATEMENT_ACCESS.name=Correctness - Method attempts to access a prepared statement parameter with index 0
rule.findbugs.DM_CONVERT_CASE.name=Internationalization - Consider using Locale parameterized version of invoked method
rule.findbugs.SE_TRANSIENT_FIELD_OF_NONSERIALIZABLE_CLASS.name=Dodgy - Transient field of class that isn't Serializable.
rule.findbugs.NN_NAKED_NOTIFY.name=Multithreaded correctness - Naked notify
rule.findbugs.VA_FORMAT_STRING_MISSING_ARGUMENT.name=Correctness - Format string references missing argument
rule.findbugs.IC_SUPERCLASS_USES_SUBCLASS_DURING_INITIALIZATION.name=Bad practice - Superclass uses subclass during initialization
rule.findbugs.SA_LOCAL_SELF_COMPARISON.name=Correctness - Self comparison of value with itself
rule.findbugs.IM_BAD_CHECK_FOR_ODD.name=Dodgy - Check for oddness that won't work for negative numbers
rule.findbugs.NP_CLOSING_NULL.name=Correctness - close() invoked on a value that is always null
rule.findbugs.XSS_REQUEST_PARAMETER_TO_JSP_WRITER.name=Security - JSP reflected cross site scripting vulnerability
rule.findbugs.IS_FIELD_NOT_GUARDED.name=Multithreaded correctness - Field not guarded against concurrent access
rule.findbugs.DM_GC.name=Performance - Explicit garbage collection; extremely dubious except in benchmarking code
rule.findbugs.IM_MULTIPLYING_RESULT_OF_IREM.name=Correctness - Integer multiply of result of integer remainder
rule.findbugs.SE_COMPARATOR_SHOULD_BE_SERIALIZABLE.name=Bad practice - Comparator doesn't implement Serializable
rule.findbugs.HE_HASHCODE_NO_EQUALS.name=Bad practice - Class defines hashCode() but not equals()
rule.findbugs.MF_CLASS_MASKS_FIELD.name=Correctness - Class defines field that masks a superclass field
rule.findbugs.NM_VERY_CONFUSING_INTENTIONAL.name=Bad practice - Very confusing method names (but perhaps intentional)
rule.findbugs.SR_NOT_CHECKED.name=Bad practice - Method ignores results of InputStream.skip()
rule.findbugs.LI_LAZY_INIT_STATIC.name=Multithreaded correctness - Incorrect lazy initialization of static field
rule.findbugs.DMI_ANNOTATION_IS_NOT_VISIBLE_TO_REFLECTION.name=Correctness - Can't use reflection to check for presence of annotation without runtime retention
rule.findbugs.ODR_OPEN_DATABASE_RESOURCE_EXCEPTION_PATH.name=Bad practice - Method may fail to close database resource on exception
rule.findbugs.BIT_IOR.name=Correctness - Incompatible bit masks (BIT_IOR)
rule.findbugs.ODR_OPEN_DATABASE_RESOURCE.name=Bad practice - Method may fail to close database resource
rule.findbugs.IP_PARAMETER_IS_DEAD_BUT_OVERWRITTEN.name=Correctness - A parameter is dead upon entry to a method but overwritten
rule.findbugs.SQL_PREPARED_STATEMENT_GENERATED_FROM_NONCONSTANT_STRING.name=Security - A prepared statement is generated from a nonconstant String
rule.findbugs.UUF_UNUSED_FIELD.name=Performance - Unused field
rule.findbugs.RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE.name=Correctness - Nullcheck of value previously dereferenced
rule.findbugs.EQ_OTHER_USE_OBJECT.name=Correctness - equals() method defined that doesn't override Object.equals(Object)
rule.findbugs.SP_SPIN_ON_FIELD.name=Multithreaded correctness - Method spins on field
rule.findbugs.SI_INSTANCE_BEFORE_FINALS_ASSIGNED.name=Bad practice - Static initializer creates instance before all static final fields assigned
rule.findbugs.NP_ALWAYS_NULL_EXCEPTION.name=Correctness - Null pointer dereference in method on exception path
rule.findbugs.MS_EXPOSE_REP.name=Malicious code vulnerability - Public static method may expose internal representation by returning array
rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_TO_BOOLEAN.name=Dodgy - Non-Boolean argument formatted using %b format specifier
rule.findbugs.MS_PKGPROTECT.name=Malicious code vulnerability - Field should be package protected
rule.findbugs.NP_NONNULL_RETURN_VIOLATION.name=Correctness - Method may return null, but is declared @NonNull
rule.findbugs.J2EE_STORE_OF_NON_SERIALIZABLE_OBJECT_INTO_SESSION.name=Bad practice - Store of non serializable object into HttpSession
rule.findbugs.NM_SAME_SIMPLE_NAME_AS_SUPERCLASS.name=Bad practice - Class names shouldn't shadow simple name of superclass
rule.findbugs.DMI_BLOCKING_METHODS_ON_URL.name=Performance - The equals and hashCode methods of URL are blocking
rule.findbugs.HE_SIGNATURE_DECLARES_HASHING_OF_UNHASHABLE_CLASS.name=Correctness - Signature declares use of unhashable class in hashed construct
rule.findbugs.UR_UNINIT_READ.name=Correctness - Uninitialized read of field in constructor
rule.findbugs.WA_NOT_IN_LOOP.name=Multithreaded correctness - Wait not in loop
rule.findbugs.DMI_FUTILE_ATTEMPT_TO_CHANGE_MAXPOOL_SIZE_OF_SCHEDULED_THREAD_POOL_EXECUTOR.name=Correctness - Futile attempt to change max pool size of ScheduledThreadPoolExecutor
rule.findbugs.RV_RETURN_VALUE_IGNORED2.name=Correctness - Method ignores return value
rule.findbugs.NM_FIELD_NAMING_CONVENTION.name=Field names should start with a lower case letter
rule.findbugs.FB_UNEXPECTED_WARNING.name=Experimental - Unexpected/undesired warning from FindBugs
rule.findbugs.BX_UNBOXED_AND_COERCED_FOR_TERNARY_OPERATOR.name=Correctness - Primitive value is unboxed and coerced for ternary operator
rule.findbugs.DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED.name=Bad practice - Classloaders should only be created inside doPrivileged block
rule.findbugs.NM_WRONG_PACKAGE.name=Correctness - Method doesn't override method in superclass due to wrong package for parameter
rule.findbugs.IL_CONTAINER_ADDED_TO_ITSELF.name=Correctness - A collection is added to itself
rule.findbugs.CI_CONFUSED_INHERITANCE.name=Dodgy - Class is final but declares protected field
rule.findbugs.HE_USE_OF_UNHASHABLE_CLASS.name=Correctness - Use of class without a hashCode() method in a hashed data structure
rule.findbugs.IJU_SUITE_NOT_STATIC.name=Correctness - TestCase implements a non-static suite method
rule.findbugs.RS_READOBJECT_SYNC.name=Multithreaded correctness - Class's readObject() method is synchronized
rule.findbugs.AM_CREATES_EMPTY_JAR_FILE_ENTRY.name=Bad practice - Creates an empty jar file entry
rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION_FROM_ARRAY.name=Correctness - Array formatted in useless way using format string
rule.findbugs.SF_DEAD_STORE_DUE_TO_SWITCH_FALLTHROUGH_TO_THROW.name=Dead store due to switch statement fall through to throw
rule.findbugs.RV_ABSOLUTE_VALUE_OF_HASHCODE.name=Correctness - Bad attempt to compute absolute value of signed 32-bit hashcode
rule.findbugs.EQ_DONT_DEFINE_EQUALS_FOR_ENUM.name=Correctness - Covariant equals() method defined for enum
rule.findbugs.SA_FIELD_DOUBLE_ASSIGNMENT.name=Correctness - Double assignment of field
rule.findbugs.DMI_COLLECTION_OF_URLS.name=Performance - Maps and sets of URLs can be performance hogs
rule.findbugs.NM_SAME_SIMPLE_NAME_AS_INTERFACE.name=Bad practice - Class names shouldn't shadow simple name of implemented interface
rule.findbugs.UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR.name=Correctness - Field not initialized in constructor
rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_NEVER_SINK.name=Correctness - Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier
rule.findbugs.SE_NONLONG_SERIALVERSIONID.name=Bad practice - serialVersionUID isn't long
rule.findbugs.RV_REM_OF_HASHCODE.name=Dodgy - Remainder of hashCode could be negative
rule.findbugs.NS_DANGEROUS_NON_SHORT_CIRCUIT.name=Dodgy - Potentially dangerous use of non-short-circuit logic
rule.findbugs.USM_USELESS_SUBCLASS_METHOD.name=Experimental - Method superfluously delegates to parent class method
rule.findbugs.ITA_INEFFICIENT_TO_ARRAY.name=Performance - Method uses toArray() with zero-length array argument
rule.findbugs.DM_MONITOR_WAIT_ON_CONDITION.name=Multithreaded correctness - Monitor wait() called on Condition
rule.findbugs.BOA_BADLY_OVERRIDDEN_ADAPTER.name=Correctness - Class overrides a method implemented in super class Adapter wrongly
rule.findbugs.IC_INIT_CIRCULARITY.name=Dodgy - Initialization circularity
rule.findbugs.NM_FUTURE_KEYWORD_USED_AS_IDENTIFIER.name=Bad practice - Use of identifier that is a keyword in later versions of Java
rule.findbugs.EC_UNRELATED_CLASS_AND_INTERFACE.name=Correctness - Call to equals() comparing unrelated class and interface
rule.findbugs.TQ_MAYBE_SOURCE_VALUE_REACHES_ALWAYS_SINK.name=Correctness - Value that might not carry a type qualifier is always used in a way requires that type qualifier
rule.findbugs.FE_TEST_IF_EQUAL_TO_NOT_A_NUMBER.name=Correctness - Doomed test for equality to NaN
rule.findbugs.NM_CONFUSING.name=Bad practice - Confusing method names
rule.findbugs.VA_FORMAT_STRING_ARG_MISMATCH.name=Correctness - Number of format-string arguments does not correspond to number of placeholders
rule.findbugs.NP_NULL_ON_SOME_PATH_EXCEPTION.name=Correctness - Possible null pointer dereference in method on exception path
rule.findbugs.DL_SYNCHRONIZATION_ON_BOXED_PRIMITIVE.name=Multithreaded correctness - Synchronization on boxed primitive could lead to deadlock
rule.findbugs.IJU_TEARDOWN_NO_SUPER.name=Correctness - TestCase defines tearDown that doesn't call super.tearDown()
rule.findbugs.SE_READ_RESOLVE_IS_STATIC.name=Correctness - The readResolve method must not be declared as a static method.
rule.findbugs.NP_NULL_ON_SOME_PATH_MIGHT_BE_INFEASIBLE.name=Dodgy - Possible null pointer dereference on path that might be infeasible
rule.findbugs.UMAC_UNCALLABLE_METHOD_OF_ANONYMOUS_CLASS.name=Correctness - Uncallable method defined in anonymous class
rule.findbugs.VA_FORMAT_STRING_BAD_CONVERSION.name=Correctness - The type of a supplied argument doesn't match format specifier
rule.findbugs.EC_ARRAY_AND_NONARRAY.name=Correctness - equals() used to compare array and nonarray
rule.findbugs.NM_BAD_EQUAL.name=Class defines equal(Object); should it be equals(Object)?
rule.findbugs.EC_UNRELATED_TYPES_USING_POINTER_EQUALITY.name=Correctness - Using pointer equality to compare different types
rule.findbugs.STI_INTERRUPTED_ON_CURRENTTHREAD.name=Correctness - Unneeded use of currentThread() call, to call interrupted()
rule.findbugs.RE_CANT_USE_FILE_SEPARATOR_AS_REGULAR_EXPRESSION.name=Correctness - File.separator used for regular expression
rule.findbugs.MWN_MISMATCHED_WAIT.name=Multithreaded correctness - Mismatched wait()
rule.findbugs.IL_INFINITE_LOOP.name=Correctness - An apparent infinite loop
rule.findbugs.NP_IMMEDIATE_DEREFERENCE_OF_READLINE.name=Dodgy - Immediate dereference of the result of readLine()
rule.findbugs.SC_START_IN_CTOR.name=Multithreaded correctness - Constructor invokes Thread.start()
rule.findbugs.STCAL_STATIC_SIMPLE_DATE_FORMAT_INSTANCE.name=Multithreaded correctness - Static DateFormat
rule.findbugs.HE_EQUALS_NO_HASHCODE.name=Bad practice - Class defines equals() but not hashCode()
rule.findbugs.UL_UNRELEASED_LOCK.name=Multithreaded correctness - Method does not release lock on all paths
rule.findbugs.PZLA_PREFER_ZERO_LENGTH_ARRAYS.name=Dodgy - Consider returning a zero length array rather than null
rule.findbugs.SKIPPED_CLASS_TOO_BIG.name=Dodgy - Class too big for analysis
rule.findbugs.NP_ARGUMENT_MIGHT_BE_NULL.name=Correctness - Method does not check for null argument
rule.findbugs.UM_UNNECESSARY_MATH.name=Performance - Method calls static Math class method on a constant value
rule.findbugs.NM_WRONG_PACKAGE_INTENTIONAL.name=Bad practice - Method doesn't override method in superclass due to wrong package for parameter
rule.findbugs.NP_NONNULL_PARAM_VIOLATION.name=Correctness - Method call passes null to a nonnull parameter
rule.findbugs.BIT_AND_ZZ.name=Correctness - Check to see if ((...) & 0) == 0
rule.findbugs.HRS_REQUEST_PARAMETER_TO_COOKIE.name=Security - HTTP cookie formed from untrusted input
rule.findbugs.SQL_BAD_RESULTSET_ACCESS.name=Correctness - Method attempts to access a result set field with index 0
rule.findbugs.INT_VACUOUS_COMPARISON.name=Dodgy - Vacuous comparison of integer value
rule.findbugs.EQ_COMPARETO_USE_OBJECT_EQUALS.name=Bad practice - Class defines compareTo(...) and uses Object.equals()
rule.findbugs.DMI_HARDCODED_ABSOLUTE_FILENAME.name=Dodgy - Code contains a hard coded reference to an absolute pathname
rule.findbugs.DMI_COLLECTIONS_SHOULD_NOT_CONTAIN_THEMSELVES.name=Correctness - Collections should not contain themselves
rule.findbugs.URF_UNREAD_FIELD.name=Performance - Unread field
rule.findbugs.DLS_OVERWRITTEN_INCREMENT.name=Correctness - Overwritten increment
rule.findbugs.BIT_SIGNED_CHECK.name=Bad practice - Check for sign of bitwise operation
rule.findbugs.UWF_NULL_FIELD.name=Correctness - Field only ever set to null
rule.findbugs.DE_MIGHT_DROP.name=Bad practice - Method might drop exception
rule.findbugs.DMI_BAD_MONTH.name=Correctness - Bad constant value for month
rule.findbugs.MS_MUTABLE_ARRAY.name=Malicious code vulnerability - Field is a mutable array
rule.findbugs.SE_INNER_CLASS.name=Bad practice - Serializable inner class
rule.findbugs.OS_OPEN_STREAM_EXCEPTION_PATH.name=Bad practice - Method may fail to close stream on exception
rule.findbugs.AT_OPERATION_SEQUENCE_ON_CONCURRENT_ABSTRACTION.name=Sequence of calls to concurrent abstraction may not be atomic
rule.findbugs.BX_UNBOXING_IMMEDIATELY_REBOXED.name=Boxed value is unboxed and then immediately reboxed
rule.findbugs.CO_COMPARETO_RESULTS_MIN_VALUE.name=compareTo()/compare() returns Integer.MIN_VALUE
rule.findbugs.DLS_DEAD_LOCAL_STORE_SHADOWS_FIELD.name=Dead store to local variable that shadows field
rule.findbugs.DMI_ARGUMENTS_WRONG_ORDER.name=Reversed method arguments
rule.findbugs.DMI_BIGDECIMAL_CONSTRUCTED_FROM_DOUBLE.name=BigDecimal constructed from double that isn't represented precisely
rule.findbugs.DMI_DOH.name=D'oh! A nonsensical method invocation
rule.findbugs.DMI_ENTRY_SETS_MAY_REUSE_ENTRY_OBJECTS.name=Adding elements of an entry set may fail due to reuse of Entry objects
rule.findbugs.DM_DEFAULT_ENCODING.name=Reliance on default encoding
rule.findbugs.ICAST_INT_2_LONG_AS_INSTANT.name=int value converted to long and used as absolute time
rule.findbugs.INT_BAD_COMPARISON_WITH_INT_VALUE.name=Bad comparison of int value with long constant
rule.findbugs.JML_JSR166_CALLING_WAIT_RATHER_THAN_AWAIT.name=Using monitor style wait methods on util.concurrent abstraction
rule.findbugs.NP_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.name=Read of unwritten public or protected field
rule.findbugs.OBL_UNSATISFIED_OBLIGATION_EXCEPTION_EDGE.name=Method may fail to clean up stream or resource on checked exception
rule.findbugs.PZ_DONT_REUSE_ENTRY_OBJECTS_IN_ITERATORS.name=Don't reuse entry objects in iterators
rule.findbugs.RV_CHECK_COMPARETO_FOR_SPECIFIC_RETURN_VALUE.name=Code checks for specific values returned by compareTo
rule.findbugs.RV_NEGATING_RESULT_OF_COMPARETO.name=Negating the result of compareTo()/compare()
rule.findbugs.RV_RETURN_VALUE_IGNORED_INFERRED.name=Method ignores return value, is this OK?
rule.findbugs.SA_LOCAL_SELF_ASSIGNMENT_INSTEAD_OF_FIELD.name=Self assignment of local rather than assignment to field
rule.findbugs.URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD.name=Unread public/protected field
rule.findbugs.UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD.name=Unused public or protected field
rule.findbugs.UWF_UNWRITTEN_PUBLIC_OR_PROTECTED_FIELD.name=Unwritten public or protected field
rule.findbugs.VA_FORMAT_STRING_USES_NEWLINE.name=Format string should use %n rather than \\n
rule.findbugs.VO_VOLATILE_INCREMENT.name=An increment to a volatile field isn't atomic
rule.findbugs.PT_ABSOLUTE_PATH_TRAVERSAL.name=Absolute path traversal in servlet
rule.findbugs.PT_RELATIVE_PATH_TRAVERSAL.name=Relative path traversal in servlet
rule.findbugs.NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR.name=Nonnull field is not initialized
rule.findbugs.MS_SHOULD_BE_REFACTORED_TO_BE_FINAL.name=Field isn't final but should be refactored to be so
rule.findbugs.BC_UNCONFIRMED_CAST_OF_RETURN_VALUE.name=Unchecked/unconfirmed cast of return value from method
rule.findbugs.TQ_COMPARING_VALUES_WITH_INCOMPATIBLE_TYPE_QUALIFIERS.name=Comparing values with incompatible type qualifiers
